# encoding: utf-8
"""This file includes necessary params, info."""
import os
import mmcv
import os.path as osp

import numpy as np
from . import config

# ---------------------------------------------------------------- #
# ROOT PATH INFO
# ---------------------------------------------------------------- #
cur_dir = osp.abspath(osp.dirname(__file__))
root_dir = osp.normpath(osp.join(cur_dir, ".."))
# directory storing experiment data (result, model checkpoints, etc).
output_dir = osp.join(root_dir, "output")

data_root = osp.join(root_dir, "datasets")
data_root = config.DATASET_BASE_PATH

# ---------------------------------------------------------------- #
# DFT DATASET
# ---------------------------------------------------------------- #
dataset_root = osp.join(data_root, config.DATASET_NAME)

train_real_dir = osp.join(dataset_root, config.DATASET_TRAIN_REAL)
train_render_dir = osp.join(dataset_root, config.DATASET_TRAIN_RENDER)
train_pbr_dir = osp.join(dataset_root, config.DATASET_TRAIN_PBR)
count_train_real = 10
count_train_render = 10
count_train_pbr = 10

test_dir = osp.join(dataset_root, config.DATASET_TEST)
count_testscene = 1

test_scenes = [i for i in range(count_testscene)]
train_real_scenes = [i for i in range(0, count_train_real)]
train_synt_scenes = [i for i in range(0, count_train_render)]
train_pbr_scenes = [i for i in range(0, count_train_pbr)]

model_dir = osp.join(dataset_root, config.DATASET_MODELS_DIR_NAME)
fine_model_dir = osp.join(dataset_root, config.DATASET_MODELS_FINE_DIR_NAME)
model_eval_dir = osp.join(dataset_root, config.DATASET_MODELS_EVAL_DIR_NAME)
model_scaled_simple_dir = osp.join(dataset_root, config.DATASET_MODELS_SCALED_DIR_NAME)  # m, .obj
vertex_scale = 0.001

# object info
id2obj = {}
for index, name in enumerate(config.MODELS_NAME):
    id2obj[index+1]=name

objects = list(id2obj.values())

obj_num = len(id2obj)
obj2id = {_name: _id for _id, _name in id2obj.items()}

model_paths = [osp.join(model_dir, "obj_{:06d}.ply").format(_id) for _id in id2obj]  # TODO: check this
texture_paths = [osp.join(model_dir, "obj_{:06d}.png".format(_id)) for _id in id2obj]

model_colors = [((i + 1) * 10, (i + 1) * 10, (i + 1) * 10) for i in range(obj_num)]  # for renderer

# yapf: disable
diameters = np.array(config.MODELS_DIAMETERS) / 1000.0 # Object Diameters?
# yapf: enable
# Camera info
width = config.CAMERA_WIDTH
height = config.CAMERA_HEIGHT
zNear = config.CAMERA_CLIP_START
zFar = config.CAMERA_CLIP_END

center = (height / 2, width / 2)
# default: 0000~0059 and synt
#camera_matrix = uw_camera_matrix = np.array([[1066.778, 0.0, 312.9869], [0.0, 1067.487, 241.3109], [0.0, 0.0, 1.0]])
camera_matrix = np.array(config.CAMERA_MATRIX)
# 0060~0091
#cmu_camera_matrix = np.array([[1077.836, 0.0, 323.7872], [0.0, 1078.189, 279.6921], [0.0, 0.0, 1.0]])

depth_factor = 1000.0


def get_models_info():
    """key is str(obj_id)"""
    models_info_path = osp.join(model_dir, "models_info.json")
    assert osp.exists(models_info_path), models_info_path
    models_info = mmcv.load(models_info_path)  # key is str(obj_id)
    return models_info


def get_fps_points():
    """key is str(obj_id) generated by
    core/gdrn_modeling/tools/ycbv/ycbv_1_compute_fps.py."""
    fps_points_path = osp.join(model_dir, "fps_points.pkl")
    assert osp.exists(fps_points_path), fps_points_path
    fps_dict = mmcv.load(fps_points_path)
    return fps_dict


def get_keypoints_3d():
    """key is str(obj_id) generated by
    core/roi_pvnet/tools/ycbv/ycbv_1_compute_keypoints_3d.py."""
    keypoints_3d_path = osp.join(model_dir, "keypoints_3d.pkl")
    assert osp.exists(keypoints_3d_path), keypoints_3d_path
    kpts_dict = mmcv.load(keypoints_3d_path)
    return kpts_dict
